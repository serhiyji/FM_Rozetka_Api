// <auto-generated />
using System;
using FM_Rozetka_Api.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FM_Rozetka_Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240816092358_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Steet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CategoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TopId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CategorySpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategorySpecifications");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CountryProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryProductions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 36,
                            Name = "China"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Czech Republic (Czechia)"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Democratic Republic of the Congo"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 50,
                            Name = "East Timor (Timor-Leste)"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 53,
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 61,
                            Name = "France"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 77,
                            Name = "India"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Ivory Coast (Côte d'Ivoire)"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Korea, North"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Korea, South"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Kosovo"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Laos"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 103,
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 107,
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 109,
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 112,
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 115,
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 116,
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 117,
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 118,
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 119,
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 120,
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 121,
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 122,
                            Name = "Myanmar (Burma)"
                        },
                        new
                        {
                            Id = 123,
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 124,
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 125,
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 126,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 127,
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 128,
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 129,
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 130,
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 131,
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = 132,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 133,
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 134,
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 135,
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 136,
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 137,
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 138,
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 139,
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 140,
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 141,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 142,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 143,
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 144,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 145,
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 146,
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 147,
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 148,
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 149,
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 150,
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 151,
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 152,
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 153,
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 154,
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 155,
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 156,
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 157,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 158,
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 159,
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 160,
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 161,
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 162,
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 163,
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 164,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 165,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 166,
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 167,
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 168,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 169,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 170,
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 171,
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 172,
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 173,
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 174,
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 175,
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 176,
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 177,
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 178,
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 179,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 180,
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 181,
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 182,
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 183,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 184,
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 185,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 186,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 187,
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 188,
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 189,
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 190,
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = 191,
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 192,
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 193,
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 194,
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 195,
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ModeratorShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ShopId");

                    b.ToTable("ModeratorShops");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.OrderStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderStatusHistories");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.PhoneConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSendInTelegram")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("PhoneConfirmations");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.PhotoProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PhotoProducts");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryProductionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Stars")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryProductId");

                    b.HasIndex("CountryProductionId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ProductAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("QuestionID");

                    b.ToTable("ProductAnswers");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ProductQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("OpenQuestion")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductQuestions");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.SellerApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasNoWebsite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNonResident")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ProcessedApplication")
                        .HasColumnType("boolean");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SellerApplications");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasNoWebsite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNonResident")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategorySpecificationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategorySpecificationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Telegram.TelegramUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusState")
                        .HasColumnType("integer");

                    b.Property<string>("TelegramChatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelegramPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("TelegramUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TgUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f44b576e-723c-4ea3-b8de-90c087cecb84",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "38022d68-6d0c-410a-b9e1-feae0c7e7cd3",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "b2230af9-72ef-4e79-8ed4-e87407fd2fae",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "573df5d0-f9fc-48e3-9088-57d9ccd9e8fc",
                            Name = "ModeratorSeller",
                            NormalizedName = "MODERATORSELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5f91f4f3-f6b6-43f7-9226-831e8c3bfc3f",
                            RoleId = "f44b576e-723c-4ea3-b8de-90c087cecb84"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Rozetka_Api.Core.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Dell"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "HP"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Asus"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Acer"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "MSI"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Razer"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "Toshiba"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            Name = "Fujitsu"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            Name = "Gateway"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            Name = "Packard Bell"
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            Name = "Vaio"
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            Name = "OPPO"
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            Name = "vivo"
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            Name = "Google Pixel"
                        },
                        new
                        {
                            Id = 18,
                            Description = "",
                            Name = "OnePlus"
                        },
                        new
                        {
                            Id = 19,
                            Description = "",
                            Name = "Realme"
                        },
                        new
                        {
                            Id = 20,
                            Description = "",
                            Name = "Motorola"
                        },
                        new
                        {
                            Id = 21,
                            Description = "",
                            Name = "Nokia"
                        },
                        new
                        {
                            Id = 22,
                            Description = "",
                            Name = "LG"
                        },
                        new
                        {
                            Id = 23,
                            Description = "",
                            Name = "Bose"
                        },
                        new
                        {
                            Id = 24,
                            Description = "",
                            Name = "JBL"
                        },
                        new
                        {
                            Id = 25,
                            Description = "",
                            Name = "Anker"
                        },
                        new
                        {
                            Id = 26,
                            Description = "",
                            Name = "Belkin"
                        },
                        new
                        {
                            Id = 27,
                            Description = "",
                            Name = "Casetify"
                        },
                        new
                        {
                            Id = 28,
                            Description = "",
                            Name = "Logitech"
                        },
                        new
                        {
                            Id = 29,
                            Description = "",
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = 30,
                            Description = "",
                            Name = "Huawei"
                        },
                        new
                        {
                            Id = 31,
                            Description = "",
                            Name = "Xbox"
                        },
                        new
                        {
                            Id = 32,
                            Description = "",
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = 33,
                            Description = "",
                            Name = "Wii"
                        },
                        new
                        {
                            Id = 34,
                            Description = "",
                            Name = "PlayStation"
                        },
                        new
                        {
                            Id = 35,
                            Description = "",
                            Name = "Canon"
                        },
                        new
                        {
                            Id = 36,
                            Description = "",
                            Name = "Nikon"
                        },
                        new
                        {
                            Id = 37,
                            Description = "",
                            Name = "Sony"
                        },
                        new
                        {
                            Id = 38,
                            Description = "",
                            Name = "Fujifilm"
                        },
                        new
                        {
                            Id = 39,
                            Description = "",
                            Name = "GoPro"
                        },
                        new
                        {
                            Id = 40,
                            Description = "",
                            Name = "DJI"
                        },
                        new
                        {
                            Id = 41,
                            Description = "",
                            Name = "Olympus"
                        },
                        new
                        {
                            Id = 42,
                            Description = "",
                            Name = "Leica"
                        },
                        new
                        {
                            Id = 43,
                            Description = "",
                            Name = "Hasselblad"
                        },
                        new
                        {
                            Id = 44,
                            Description = "",
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 45,
                            Description = "",
                            Name = "LGDeWalt"
                        },
                        new
                        {
                            Id = 46,
                            Description = "",
                            Name = "Dyson"
                        },
                        new
                        {
                            Id = 47,
                            Description = "",
                            Name = "Philips"
                        },
                        new
                        {
                            Id = 48,
                            Description = "",
                            Name = "Panasonic"
                        },
                        new
                        {
                            Id = 49,
                            Description = "",
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 50,
                            Description = "",
                            Name = "Bosch"
                        },
                        new
                        {
                            Id = 51,
                            Description = "",
                            Name = "Siemens"
                        },
                        new
                        {
                            Id = 52,
                            Description = "",
                            Name = "Electrolux"
                        },
                        new
                        {
                            Id = 53,
                            Description = "",
                            Name = "Whirlpool"
                        },
                        new
                        {
                            Id = 54,
                            Description = "",
                            Name = "Miele"
                        },
                        new
                        {
                            Id = 55,
                            Description = "",
                            Name = "Beko"
                        },
                        new
                        {
                            Id = 56,
                            Description = "",
                            Name = "Candy"
                        },
                        new
                        {
                            Id = 57,
                            Description = "",
                            Name = "Indesit"
                        });
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "5f91f4f3-f6b6-43f7-9226-831e8c3bfc3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3174921b-2bf6-41db-9a48-c1481e9ef596",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP412Dh5CE3tATtdWKExylcnsBAYCim0OKnR3lhnA/bWkaloFj+yNOqvCWhToPoKYg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b9d8eff-43b6-4e5e-8963-001dd807c973",
                            TwoFactorEnabled = false,
                            UserName = "admin@email.com",
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych"
                        });
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Adress", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("Adresses")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CartItem", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("CartItems")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Discount", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Favorite", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("Favorites")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ModeratorShop", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("ModeratorShops")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Shop", "Shop")
                        .WithMany("ModeratorShop")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Order", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.OrderStatusHistory", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Payment", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.PhoneConfirmation", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.PhotoProduct", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("PhotoProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Product", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.CategoryProduct", "CategoryProduct")
                        .WithMany("Products")
                        .HasForeignKey("CategoryProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.CountryProduction", "CountryProduction")
                        .WithMany("Products")
                        .HasForeignKey("CountryProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryProduct");

                    b.Navigation("CountryProduction");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ProductAnswer", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("ProductAnswers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.ProductQuestion", "ProductQuestion")
                        .WithMany("ProductAnswers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ProductQuestion");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ProductBrand", b =>
                {
                    b.HasOne("Rozetka_Api.Core.Entities.Brand", "Brand")
                        .WithMany("ProductBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("ProductBrands")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ProductQuestion", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Review", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Shipment", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Shop", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.AppUser", "AppUser")
                        .WithMany("Shops")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Company", "Company")
                        .WithMany("Shops")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Specification", b =>
                {
                    b.HasOne("FM_Rozetka_Api.Core.Entities.CategorySpecification", "CategorySpecification")
                        .WithMany("Specifications")
                        .HasForeignKey("CategorySpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_Rozetka_Api.Core.Entities.Product", "Product")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategorySpecification");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CategoryProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CategorySpecification", b =>
                {
                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Company", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.CountryProduction", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Discounts");

                    b.Navigation("Favorites");

                    b.Navigation("OrderItems");

                    b.Navigation("PhotoProducts");

                    b.Navigation("ProductBrands");

                    b.Navigation("ProductQuestions");

                    b.Navigation("Reviews");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.ProductQuestion", b =>
                {
                    b.Navigation("ProductAnswers");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.Shop", b =>
                {
                    b.Navigation("ModeratorShop");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Rozetka_Api.Core.Entities.Brand", b =>
                {
                    b.Navigation("ProductBrands");
                });

            modelBuilder.Entity("FM_Rozetka_Api.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("ModeratorShops");

                    b.Navigation("Orders");

                    b.Navigation("ProductAnswers");

                    b.Navigation("ProductQuestions");

                    b.Navigation("Reviews");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
